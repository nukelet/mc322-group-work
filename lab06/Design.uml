@startuml

class CSVHandling {
    - dataSource: String
    - dataExport: String
    - commands: String[][]
    - state: String[]

    + CSVHandling()
    + getDataSource(): String
    + setDataSource(dataSource: String): void
    + getDataExport(): String
    + setDataExport(dataExport: String): void
    + requestCommands(): String[][]
    + exportState(state: String[]): void
    - readCSV(): void
    - writeCSV(): void
}

enum ErrorType {
    NONE
    OUT_OF_BOUNDS
    INVALID_COMPONENTS
}

enum ComponentType {
    PLAYER
    HOLE
    BREEZE
    STINK
    WUMPUS
    GOLD
    EMPTY
}

class Position {
    - row: int
    - column: int

    + Position(row: int, column: int)
    + getRow(): int
    + getColumn(): int
    + up(): Position
    + down(): Position
    + left(): Position
    + right(): Position
    + isEqual(position: Position): boolean
    + add(position: Position): Position
    + toString(): String
}

class Component {
    # position: Position
    # cave: Cave

    + Component(cave: Cave, position: Position)
    # spawnSecondaryComponents(): void
    + getPosition(): Position
    + getType(): ComponentType
    + singleLetterCode(): String
    + toString(): String
}

class Gold {
    + Gold(cave: Cave, position: Position)
}

Component <|-- Gold

class Hole {
    + Hole(cave: Cave, position: Position)
    # spawnSecondaryComponents(): void
}

Component <|-- Hole

class Wumpus {
    + Wumpus(cave: Cave, position: Position)
    # spawnSecondaryComponents(): void
}

Component <|-- Wumpus

class Hero {
    - arrows: int
    - arrowEquiped: boolean

    + Hero(cave: Cave, position: Position)
    + equipArrow(): void
    + useArrow(): void
    + collectGold(): void
}

Component <|-- Hero

class Stink {
    + Stink(cave: Cave, position: Position)
}

Component <|-- Stink

class Breeze {
    + Breeze(cave: Cave, position: Position)
}

Component <|-- Breeze

class Room {
    - components: ArrayList<Component>
    - visited: boolean

    + Room()
    + getComponents(): ArrayList<Component>
    + addComponent(component: Component): ErrorType
    + removeComponent(component: Component): void
    + visited(): boolean
    + reveal(): void
    + hasComponentType(type: ComponentType): boolean
    + hasComponentType(componentList: ComponentType[]): boolean
    + isEmpty(): boolean
    + toString(): String
}

class Cave {
    - rooms: Room[4][4]

    + isPositionInside(position: Position): boolean
    + addComponent(component: Component): boolean
    + toString(): String
}

class CaveGenerator {

    {static} + generateCaveFromCsv(csvPath: String): Cave
}

class Game {
    - playerName: String
    - score: int = 0
    - cave: Cave

    + Game(playerName: String, cave: Cave)
    + toString(): String
}

class AppMundoWumpus {

    {static} + main(args: String[]): void
}

@enduml
